from rest_framework.test import APITestCase
from rest_framework import status
from django.urls import reverse
from django.contrib.auth.models import User
from forum_app.models import Question, Like

'''
Was solltest man bei Like testen?

- Liken einer Frage (POST)

- Nicht doppelt liken können

- Löschen eines Likes (DELETE)

- Like-Liste anzeigen (GET)

- Nicht angemeldete Nutzer dürfen nicht liken (401)
'''

class LikeTests(APITestCase):

    def test_get_like(self):
        url = reverse('like-list')  # Erzeugt die URL für die Like-Liste anhand des URL-Namens

        # Alternative absolute URL
        # url = 'http://127.0.0.1:8000/api/forum/likes/'

        response = self.client.get(url)  # Sendet einen GET-Request an den Like-Endpunkt

        self.assertEqual(response.status_code, status.HTTP_200_OK)  # Erwartet 200 OK als Antwort
        # self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)  # Beispiel für einen absichtlichen Fehltest

    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='testpass')        
        self.other_user = User.objects.create_user(username='otheruser', password='otherpass')
        self.question = Question.objects.create(
            title='Testfrage',
            content='Inhalt der Frage',
            author=self.other_user,
            category='frontend'
        )
        self.client.force_authenticate(user=self.user)

    def test_like_question(self):
        url = reverse('like-list')
        data = {'question': self.question.id}
        response = self.client.post(url, data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(Like.objects.count(), 1)
        self.assertEqual(Like.objects.first().user, self.user)


    def test_duplicate_like_not_allowed(self):
        url = reverse('like-list')
        data = {'question': self.question.id}
        self.client.post(url, data, format='json')  # Erster Like
        response = self.client.post(url, data, format='json')  # Zweiter Versuch
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertEqual(Like.objects.count(), 1)
    
    def test_delete_like(self):
        like = Like.objects.create(user=self.user, question=self.question)
        url = reverse('like-detail', kwargs={'pk': like.id})
        response = self.client.delete(url)
        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)
        self.assertEqual(Like.objects.count(), 0)

    def test_list_likes(self):
        Like.objects.create(user=self.user, question=self.question)
        url = reverse('like-list')
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)

    def test_unauthenticated_user_cannot_like(self):
        self.client.logout()
        url = reverse('like-list')
        data = {'question': self.question.id}
        response = self.client.post(url, data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)
